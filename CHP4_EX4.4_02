//practice2.h
#ifndef PRACTICE2_H
#define PRACTICE2_H
const int SIZE = 100;
class sequential
{
public:
	int locationWanted;
	int array[SIZE];
	bool sequentialSearch(int[], int, int, int&);
};
#endif

.................................................................................................................................
//practice2.cpp
#include<iostream>
using namespace std;
#include "practice2.h"

bool sequential::sequentialSearch(int array[], int SIZE, int target, int& locWanted)
{
	int index = 0;
	bool found = false;
	while (index < SIZE - 1)
	{
		if (array[index] != target)
			index++;
		else
		{
			found = true;
			locWanted = index;
			break;
		}
	}
	return found;
}
....................................................................................................................................
//main.cpp
#include<iostream>
using namespace std;
#include"practice2.h"

void main()
{
	int target, i;
	bool found;
	sequential SS;

	cout << " The Data\n";
	for (i = 0; i < SIZE; i++)
		SS.array[i] = rand() % 300 + 1;

	for (i = 0; i < SIZE; i++)
		cout << SS.array[i] << " ";
	cout << endl;

	cout << "Insert a target, or 0 to stop: ";
	cin >> target;
	do
	{
		found = SS.sequentialSearch(SS.array, SIZE, target, SS.locationWanted);

		if (found)
			cout << "\tFound " << target << "at index " << SS.locationWanted << endl;
		else
			cout << "\tTarget not found " << endl;
		cout << "\nInsert a target,or 0 to stop: ";
		cin >> target;
	} while (target != 0);
}












