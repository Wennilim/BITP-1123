//List.h
#ifndef LISH_H
#define LISH_H

template<class DataType>
class List
{
private:
	class Node
	{
	public:
		DataType data;
		Node* link;
	};

	Node* pHead;
	Node* pCurr;
	int numItem;

public:
	List();
	~List();
	void Addtofront();
	void deletefront();
	void printdata();
	int numofitem();
};
#endif


template<class DataType>
List<DataType>::List()
{
	numItem = 0;
	pHead = 0;
}

template<class DataType>
List<DataType>::~List() { }


template<class DataType>
void List<DataType>::Addtofront()
{
	DataType item;
	Node* pNew = new Node;
	cout << "Enter data: ";
	cin >> item;
	pNew->data = item;
	pNew->link = pHead;
	pHead = pNew;
	numItem++;
}

template<class DataType>
void List<DataType>::deletefront()
{
	pHead = pHead->link;
	numItem--;
	cout << "First item is deleted.\n" << endl;
}


template<class DataType>
void List <DataType>::printdata()
{
	pCurr = pHead;
	while (pCurr != 0)
	{
		cout << pCurr->data << " ";
		pCurr = pCurr->link;
	}
	cout << "\n";
}

template <class DataType>
int List<DataType>::numofitem()
{
	return numItem;
}

.....................................................................................................................................
//ListMain.cpp
#include<iostream>
#include<string>
using namespace std;
#include"List.h"

void main()
{
	int target;
	int location;
	List<int>x;
	for (int i = 1; i < 4; i++)
	{
		x.Addtofront();
	}
	cout << "\nNumber of first item now is: " << x.numofitem();
	cout << "\nThe list are: " << endl;
	x.printdata();

	x.deletefront();
	cout << "Number of item now is: " << x.numofitem();
	cout << "\n The list are :";
	x.printdata();

}
###########################################################################################################################
Output:

Enter data: 3
Enter data: 2
Enter data: 1

Number of first item now is: 3
The list are:
1 2 3
First item is deleted.

Number of item now is: 2
 The list are :2 3

C:\Users\User\source\repos\chapter_06\Debug\chapter_06.exe (process 1276) exited with code 0.
Press any key to close this window . . .










